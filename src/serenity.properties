webdriver.driver=firefox
serenity.take.screenshots=FOR_EACH_ACTION

webdriver.base.url=https://opensource-demo.orangehrmlive.com/
serenity.project.name = Serenity and Cucumber and JUnit4 Demo
jira.url=https://myserver.atlassian.net
jira.project=FH
jira.username=jirauser
jira.password=t0psecret

# Both JIRA and the JIRA-Serenity integration are quite flexible.
# We saw earlier that we had configured a custom Acceptance Criteria field in our JIRA stories.
# We have displayed this custom field in the report shown above by including it in the serenity.properties file

jira.custom.field.1=Acceptance Criteria

# Serenity reads the narrative text appearing in this report (As a frequent flyer)
# from the Description field of the corresponding JIRA card.
# We can override this behavior and get Serenity to read this
# value from a different custom field using the jira.custom.narrative.field property.
# For example, some teams use a custom field called User Story
# to store the narrative text, instead of the Description field.
jira.custom.narrative.field=User Story

serenity.skip.jira.updates=true

# You can also configure the plugin to update the status of JIRA issues.
# This is deactivated by default: to use this option, you need to set the serenity
# .jira.workflow.active option to true, e.g.

serenity.jira.workflow.active=true


# You can also customize the names of the types of releases using the serenity.release.types property, e.g.
serenity.release.types=milestone, release, version

report.customfields.environment = ${environment}
report.customfields.ApplicationVersion = 1.2.3

# We can also access any system variables that Java has access to. \
# For example, we could include the name of the user who ran the test run with the ${USER} system variable
report.customfields.user = ${USER}

# Not all system properties are available to Java. For example, on Linux systems, \
# the $HOST variable gives the name of the local machine. \
# We could include this in our report by adding the following property:

report.customfields.host = ${HOST}

# By default, the fields will appear in an arbitrary order.\
# You can force the fields to appear in a pre-determined order using the report.customfields.order field:

report.customfields.order=ApplicationVersion,environment,user,host

# You can use Groovy expressions to access system properties (that you can pass in from the command line).
# The env property gives you access to the current environment variables.
#  For example, to display the current Jenkins build number, you could include the following line:
sysinfo.build = "${env.BUILD_NUMBER}"
